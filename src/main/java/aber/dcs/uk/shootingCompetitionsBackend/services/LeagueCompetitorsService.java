package aber.dcs.uk.shootingCompetitionsBackend.services;

import aber.dcs.uk.shootingCompetitionsBackend.dao.LeagueCompetitorDao;
import aber.dcs.uk.shootingCompetitionsBackend.dao.LeagueCompetitorGenerateGroupsDao;
import aber.dcs.uk.shootingCompetitionsBackend.repositories.LeagueCompetitorsRepository;
import aber.dcs.uk.shootingCompetitionsBackend.responses.LeagueCompetitorRowTableResponse;
import aber.dcs.uk.shootingCompetitionsBackend.responses.LeagueGenerateResponse;
import aber.dcs.uk.shootingCompetitionsBackend.responses.LeagueSelectResponse;
import org.springframework.data.util.Pair;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class LeagueCompetitorsService {
    private final LeagueCompetitorsRepository leagueCompetitorsRepository;

    public LeagueCompetitorsService(
            LeagueCompetitorsRepository leagueCompetitorsRepository) {
        this.leagueCompetitorsRepository = leagueCompetitorsRepository;
    }

    /**
     * Method collects data of competitors for league and displays them
     * back with order from highest average-score to lowest average-score
     * @param leagueId league id
     * @param gunType league gunType
     * @return List of LeagueCompetitorRowTableResponse ordered by average-score
     */
    public List<LeagueCompetitorRowTableResponse> getLeagueCompetitorsByLeagueId(
            Long leagueId, String gunType){

        List<LeagueCompetitorDao> leagueCompetitors =
                leagueCompetitorsRepository.getLeagueCompetitorsWithAvgScoreByLeagueId(leagueId, gunType);

        return leagueCompetitors.stream().
                map(LeagueCompetitorRowTableResponse::new).
                collect(Collectors.toList());
    }

    /**
     * ADMIN ACCESS ONLY
     * Method creates league groups based on average shooting scores of users
     * @param competitorsGroupByGunType Map contains gunType as Key and list of users Ids as value
     * @param groupSize number of leagues that user's must be split
     * @return List of LeagueGenerateResponse which contains league name and list of users split in this league
     * each league have up to {@code groupSize} users in it.
     */
    @PreAuthorize("hasAuthority('ADMIN')")
    public List<LeagueGenerateResponse> generateLeaguesBySize(
            Map<String, List<Long>> competitorsGroupByGunType, Integer groupSize){

        List<LeagueCompetitorGenerateGroupsDao> leagueGroupsByGunTypeOrderedByAverageShootingScore;
        List<LeagueGenerateResponse> generatedLeagues = new ArrayList<>();

        for(String gunType: competitorsGroupByGunType.keySet()){
            //get all competitors to generate league
            //database assigned league group id for each user based on groupSize and user GunType average score
            leagueGroupsByGunTypeOrderedByAverageShootingScore =
                    leagueCompetitorsRepository.getLeagueGroupsByGunTypeOrderedByAverageShootingScore(
                            competitorsGroupByGunType.get(gunType), gunType, groupSize);

            splitDataIntoLeagueGroups(leagueGroupsByGunTypeOrderedByAverageShootingScore, generatedLeagues);
        }

        return generatedLeagues;
    }

    /**
     * Method splits ordered average shooting score with user data to list of leagues
     * @param leagueGroupsByGunTypeOrderedByAverageShootingScore List of overage shooting scores for gunType.
     *                                                           Each variable also have information about user and
     *                                                           to which league should belong to. List must be sorted
     *                                                           by average score.
     * @param generatedLeagues List of leagues generated by method. Each league contains information about league name
     *                         and league competitors.
     */
    private static void splitDataIntoLeagueGroups(
            List<LeagueCompetitorGenerateGroupsDao> leagueGroupsByGunTypeOrderedByAverageShootingScore,
            List<LeagueGenerateResponse> generatedLeagues) {
        Set<Pair<Integer, String>> currentUniqueLeague = new HashSet<>();
        LeagueGenerateResponse newLeagueGroup = new LeagueGenerateResponse("", new ArrayList<>());
        //run through all data from database
        for(LeagueCompetitorGenerateGroupsDao elem: leagueGroupsByGunTypeOrderedByAverageShootingScore) {
            //if league group was not seen before
            if (!currentUniqueLeague.contains(Pair.of(elem.getGroupId(), elem.getGunType()))) {
                if (!newLeagueGroup.getLeagueCompetitors().isEmpty()) {
                    // league group was not seen before and list is not empty
                    // this means there is new league group to create therefore
                    // this save existing league group in the list
                    // and instantiated new LeagueGenerateResponse to store new league group
                    generatedLeagues.add(newLeagueGroup);
                    newLeagueGroup = new LeagueGenerateResponse("", new ArrayList<>());
                }
                //if league group was not seen before but the list was empty
                // this means that we are going to add first competitor to league group
                // alongside new league group name
                newLeagueGroup.setLeagueName(elem.getGunType() + "_LEAGUE_" + elem.getGroupId().toString());

                //update set with unique league group to make sure to next competitors
                //fall into the same group
                currentUniqueLeague.add(Pair.of(elem.getGroupId(), elem.getGunType()));
            }
            //add new competitor data to new group league in each iteration
            newLeagueGroup.getLeagueCompetitors().add(new LeagueCompetitorRowTableResponse(elem));
        }

        //after loop finishes there is last league group in variable which needs to be added.
        generatedLeagues.add(newLeagueGroup);
    }

    /**
     * Method gets all leagues associated with user
     * @param userId user's id
     * @return list of leagues or Access denied error if user don't have access to resource
     */
    public List<LeagueSelectResponse> getAllUserLeagues(Long userId){
        return leagueCompetitorsRepository.getAllLeaguesAssociatedWithUser(userId).
                stream().
                map(LeagueSelectResponse::new).
                collect(Collectors.toList());
    }
}
